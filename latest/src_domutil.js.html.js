tui.util.defineNamespace("fedoc.content", {});
fedoc.content["src_domutil.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview DOM manipulation utility module\n * @author NHN Ent. FE Development team &lt;dl_javascript@nhnent.com>\n */\nconst util = tui.util;\nconst domevent = require('./domevent');\n\n/**\n * Setting element style\n * @param {(HTMLElement|SVGElement)} element - element to setting style\n * @param {(string|object)} key - style prop name or {prop: value} pair object\n * @param {string} [value] - style value\n * @name css\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function css(element, key, value) {\n    const style = element.style;\n\n    if (util.isString(key)) {\n        style[key] = value;\n\n        return;\n    }\n\n    util.forEach(key, function(v, k) {\n        style[k] = v;\n    });\n}\n\n/**\n * Get HTML element's design classes.\n * @param {(HTMLElement|SVGElement)} element target element\n * @returns {string} element css class name\n * @name getClass\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function getClass(element) {\n    if (!element || !element.className) {\n        return '';\n    }\n\n    if (util.isUndefined(element.className.baseVal)) {\n        return element.className;\n    }\n\n    return element.className.baseVal;\n}\n\n/**\n * Check element has specific css class\n * @param {(HTMLElement|SVGElement)} element - target element\n * @param {string} cssClass - css class\n * @returns {boolean}\n * @name hasClass\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function hasClass(element, cssClass) {\n    if (element.classList) {\n        return element.classList.contains(cssClass);\n    }\n\n    let origin = getClass(element).split(/\\s+/);\n\n    return origin.indexOf(cssClass) > -1;\n}\n\n/**\n * Add css class to element\n * @param {(HTMLElement|SVGElement)} element - target element\n * @param {...string} cssClass - css classes to add\n * @name addClass\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function addClass(element, ...cssClass) {    // eslint-disable-line\n    if (element.classList) {\n        const classList = element.classList;\n        cssClass.forEach(name => {\n            classList.add(name);\n        });\n\n        return;\n    }\n\n    const origin = getClass(element);\n\n    if (origin) {\n        cssClass = [...origin.split(/\\s+/), ...cssClass];\n    }\n\n    const newClass = [...new Set(cssClass)].join(' ');\n\n    if (util.isUndefined(element.className.baseVal)) {\n        element.className = newClass;\n\n        return;\n    }\n\n    element.className.baseVal = newClass;\n}\n\n/**\n * Remove css class from element\n * @param {(HTMLElement|SVGElement)} element - target element\n * @param {...string} cssClass - css classes to remove\n * @name removeClass\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function removeClass(element, ...cssClass) {    // eslint-disable-line\n    if (element.classList) {\n        const classList = element.classList;\n        cssClass.forEach(name => {\n            classList.remove(name);\n        });\n\n        return;\n    }\n\n    const origin = getClass(element).split(/\\s+/);\n    const classes = origin.filter(name => {\n        return cssClass.indexOf(name) &lt; 0;\n    });\n    const newClass = classes.join(' ');\n\n    if (util.isUndefined(element.className.baseVal)) {\n        element.className = newClass;\n\n        return;\n    }\n\n    element.className.baseVal = newClass;\n}\n\n/**\n * getBoundingClientRect polyfill\n * @param {HTMLElement} element - target element\n * @returns {object} rect object\n * @name getRect\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function getRect(element) {\n    let {top, right, bottom, left, width, height} =\n        element.getBoundingClientRect();\n\n    if (util.isUndefined(width) || util.isUndefined(height)) {\n        width = element.offsetWidth;\n        height = element.offsetHeight;\n    }\n\n    return {top, right, bottom, left, width, height};\n}\n\n/**\n * Set data attribute to target element\n * @param {HTMLElement} element - element to set data attribute\n * @param {string} key - key\n * @param {string} value - value\n * @name setData\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function setData(element, key, value) {\n    if (element.dataset) {\n        element.dataset[key] = value;\n\n        return;\n    }\n\n    element.setAttribute('data-' + key, value);\n}\n\n/**\n * Convert uppercase letter to hyphen lowercase character\n * @param {string} match - match from String.prototype.replace method\n * @returns {string}\n * @name upperToHyphenLower\n * @memberof tui.domutil\n * @function\n * @api\n */\nfunction upperToHyphenLower(match) {\n    return '-' + match.toLowerCase();\n}\n\n/**\n * Get data value from data-attribute\n * @param {HTMLElement} element - target element\n * @param {string} key - key\n * @returns {string} value\n * @name getData\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function getData(element, key) {\n    if (element.dataset) {\n        return element.dataset[key];\n    }\n\n    key = key.replace(/([A-Z])/g, upperToHyphenLower);\n\n    return element.getAttribute('data-' + key);\n}\n\n/**\n * Remove data property\n * @param {HTMLElement} element - target element\n * @param {string} key - key\n * @name removeData\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function removeData(element, key) {\n    if (element.dataset) {\n        delete element.dataset[key];\n\n        return;\n    }\n\n    element.removeAttribute('data-' + key);\n}\n\n/**\n * Remove element from parent node.\n * @param {HTMLElement} element - element to remove.\n * @name removeElement\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function removeElement(element) {\n    if (element &amp;&amp; element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\n/**\n * Set element bound\n * @param {HTMLElement} element - element to change bound\n * @param {object} bound - bound object\n * @param {number} [bound.top] - top pixel\n * @param {number} [bound.right] - right pixel\n * @param {number} [bound.bottom] - bottom pixel\n * @param {number} [bound.left] - left pixel\n * @param {number} [bound.width] - width pixel\n * @param {number} [bound.height] - height pixel\n * @name setBound\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function setBound(element, {top, right, bottom, left, width, height} = {}) {\n    const args = {top, right, bottom, left, width, height};\n    const newBound = {};\n\n    util.forEach(args, (value, prop) => {\n        if (util.isExisty(value)) {\n            newBound[prop] = util.isNumber(value) ? (value + 'px') : value;\n        }\n    });\n\n    Object.assign(element.style, newBound);\n}\n\nconst elProto = Element.prototype;\nconst matchSelector = elProto.matches ||\n    elProto.webkitMatchesSelector ||\n    elProto.mozMatchesSelector ||\n    elProto.msMatchesSelector ||\n    function(selector) {\n        const doc = this.document || this.ownerDocument;\n        const match = findAll(doc, selector).find(el => this === el);\n\n        return !!match;\n    };\n\n/**\n * Check element match selector\n * @param {HTMLElement} element - element to check\n * @param {string} selector - selector to check\n * @returns {boolean} is selector matched to element?\n * @name matches\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function matches(element, selector) {\n    return matchSelector.call(element, selector);\n}\n\n/**\n * Find parent element recursively\n * @param {HTMLElement} element - base element to start find\n * @param {string} selector - selector string for find\n * @returns {HTMLElement} - element finded or null\n * @name closest\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function closest(element, selector) {\n    var parent = element.parentNode;\n\n    if (matches(element, selector)) {\n        return element;\n    }\n\n    while (parent &amp;&amp; parent !== document) {\n        if (matches(parent, selector)) {\n            return parent;\n        }\n\n        parent = parent.parentNode;\n    }\n\n\n    return null;\n}\n\n/**\n * Find single element\n * @param {(HTMLElement|string)} [element=document] - base element to find\n * @param {string} [selector] - css selector\n * @returns {HTMLElement}\n * @name find\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function find(element, selector) {\n    if (util.isString(element)) {\n        return document.querySelector(element);\n    }\n\n    return element.querySelector(selector);\n}\n\n/**\n * Find multiple element\n * @param {(HTMLElement|string)} [element=document] - base element to\n *  find\n * @param {string} [selector] - css selector\n * @returns {HTMLElement[]}\n * @name findAll\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function findAll(element, selector) {\n    if (util.isString(element)) {\n        return [...document.querySelectorAll(element)];\n    }\n\n    return [...element.querySelectorAll(selector)];\n}\n\n/**\n * Stop event propagation.\n * @param {Event} e - event object\n * @name stopPropagation\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function stopPropagation(e) {\n    if (e.stopPropagation) {\n        e.stopPropagation();\n\n        return;\n    }\n\n    e.cancelBubble = true;\n}\n\n/**\n * Prevent default action\n * @param {Event} e - event object\n * @name preventDefault\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function preventDefault(e) {\n    if (e.preventDefault) {\n        e.preventDefault();\n\n        return;\n    }\n\n    e.returnValue = false;\n}\n\n/**\n * Check specific CSS style is available.\n * @param {array} props property name to testing\n * @returns {(string|boolean)} return true when property is available\n * @name testCSSProp\n * @memberof tui.domutil\n * @function\n * @api\n * @example\n * var props = ['transform', '-webkit-transform'];\n * domutil.testCSSProp(props);    // 'transform'\n */\nfunction testCSSProp(props) {\n    var style = document.documentElement.style,\n        i = 0,\n        len = props.length;\n\n    for (; i &lt; len; i += 1) {\n        if (props[i] in style) {\n            return props[i];\n        }\n    }\n\n    return false;\n}\n\nlet prevSelectStyle = '';\nconst SUPPORT_SELECTSTART = 'onselectstart' in document;\nconst userSelectProperty = testCSSProp([\n    'userSelect',\n    'WebkitUserSelect',\n    'OUserSelect',\n    'MozUserSelect',\n    'msUserSelect'\n]);\n\n/**\n * Disable browser's text selection behaviors.\n * @name disableTextSelection\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function disableTextSelection() {\n    var style;\n\n    if (SUPPORT_SELECTSTART) {\n        domevent.on(document, 'selectstart', preventDefault);\n    } else {\n        style = document.documentElement.style;\n        prevSelectStyle = style[userSelectProperty];\n        style[userSelectProperty] = 'none';\n    }\n}\n\n/**\n * Enable browser's text selection behaviors.\n * @name enableTextSelection\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function enableTextSelection() {\n    if (SUPPORT_SELECTSTART) {\n        domevent.off(document, 'selectstart', preventDefault);\n    } else {\n        document.documentElement.style[userSelectProperty] = prevSelectStyle;\n    }\n}\n\n/**\n * Disable browser's image drag behaviors.\n * @name disableImageDrag\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function disableImageDrag() {\n    domevent.on(document, 'dragstart', preventDefault);\n}\n\n/**\n * Enable browser's image drag behaviors.\n * @name enableImageDrag\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function enableImageDrag() {\n    domevent.off(document, 'dragstart', preventDefault);\n}\n\n/**\n * Represents the text content of a node and its descendants\n * @param {HTMLElement} element - html element\n * @returns {string} text content\n * @name textContent\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function textContent(element) {\n    if (util.isExisty(element.textContent)) {\n        return element.textContent;\n    }\n\n    return element.innerText;\n}\n\n/**\n * Insert element to next of target element\n * @param {HTMLElement} element - html element to insert\n * @param {HTMLElement} target - target element\n * @name insertAfter\n * @memberof tui.domutil\n * @function\n * @api\n */\nexport function insertAfter(element, target) {\n    const parent = target.parentNode;\n\n    if (target === parent.lastChild) {\n        parent.appendChild(element);\n    } else {\n        parent.insertBefore(element, target.nextSibling);\n    }\n}\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"